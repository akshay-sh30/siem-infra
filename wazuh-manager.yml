---
- hosts: wazuh_manager
  # Needs sudo because of role, unless become_method=su fixes it?
  pre_tasks:
    - name: Update apt packages (Ubuntu)
      become: true
      apt:
        # upgrade: yes
        update_cache: yes
        cache_valid_time: 86400 #One day
      when: ansible_os_family == "Debian"

    - name: Update apt packages (CentOS)
      become: true
      yum:
        # upgrade: yes
        update_cache: yes
      when: ansible_os_family == "RedHat"

  roles:
    - role: roles/wazuh-ansible/roles/wazuh/ansible-wazuh-manager
  vars:
    wazuh_manager_config:
      api:
        https: 'yes'
      vulnerability_detector:
        enabled: "yes"
        interval: "5m"
        ignore_time: "10m"
        run_on_start: "yes"
        providers:
          - enabled: "yes"
            os:
              # - 'trusty'
              # - 'xenial'
              - "bionic"
            update_interval: "1h"
            name: '"canonical"'
          - enabled: "yes"
            os:
              # - 'wheezy'
              - "stretch"
              # - 'jessie'
              # - 'buster'
            update_interval: "1h"
            name: '"debian"'
          # - enabled: 'no'
          #   update_from_year: '2010'
          #   update_interval: '1h'
          #   name: '"redhat"'
          - enabled: "yes"
            update_from_year: "2010"
            update_interval: "1h"
            name: '"nvd"'
            # Supposedly outdated:
          # - vuls:
          #   disable: 'yes'
          #   interval: '1d'
          #   run_on_start: 'yes'
          #   args:
          #     - 'mincvss 5'
          #     - 'antiquity-limit 20'
          #     - 'updatenvd'
          #     - 'nvd-year 2016'
          #     - 'autoupdate'
          # OSQuery manager
      osquery:
        disable: "no"
        run_daemon: "yes"
        log_path: "/var/log/osquery/osqueryd.results.log"
        config_path: "/etc/osquery/osquery.conf"
        ad_labels: "yes"

  become_user: root
  # Untested: sudo not installed and root cannot sudo without being sudoers
  # become_user: root
  # become_method: su
  # become_method: runas

# TODO: sysmon rules for powershell cmds
# https://documentation.wazuh.com/3.9/user-manual/capabilities/log-data-collection/how-to-collect-wlogs.html

# <group name="sysmon,">
#  <rule id="255000" level="12">
#  <if_group>sysmon_event1</if_group>
#  <field name="sysmon.image">\\powershell.exe||\\.ps1||\\.ps2</field>
#  <description>Sysmon - Event 1: Bad exe: $(sysmon.image)</description>
#  <group>sysmon_event1,powershell_execution,</group>
#  </rule>
# </group>
# {
#     "win": {
#         "system": {
#         "providerName": "MsiInstaller",
#         "eventID": "11707",
#         "level": "4",
#         "task": "0",
#         "keywords": "0x80000000000000",
#         "systemTime": "2019-04-03T10:47:39.000000000Z",
#         "eventRecordID": "12615",
#         "channel": "Application",
#         "computer": "pcname",
#         "severityValue": "INFORMATION",
#         "message": "Product: Dr. Memory -- Installation completed successfully."
#         },
#         "eventdata": {
#         "binary": "7B36373637354144362D314642302D344445312D394543462D3834393937353135303235457D",
#         "data": "Product: Dr. Memory -- Installation completed successfully."
#         }
#     }
# }

# This event can be filtered field by field in case an alert is desired to trigger when it occurs. In this use case, the filters used will be the provider name and the event ID, as follows:

# <rule id="60612" level="12">
#     <field name="win.system.providerName">MsiInstaller</field>
#     <field name="win.system.eventID">^11707$|^1033$</field>
      # <description>Application Installed $(win.eventdata.data)</description>
# </rule>
